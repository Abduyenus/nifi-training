pipeline {
    agent any
    
    triggers {
        githubPush()
    }
    
    environment {
        NIFI_URL = 'https://localhost:8443/nifi-api'
    }
    
    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
                echo '‚úÖ Code checked out successfully from GitHub'
            }
        }
        
        stage('Validate Files') {
            steps {
                script {
                    if (fileExists('template.xml')) {
                        echo '‚úÖ template.xml found'
                    } else {
                        error '‚ùå template.xml not found!'
                    }
                }
            }
        }
        
        stage('Deploy to NiFi') {
            steps {
                script {
                    echo 'üöÄ Starting NiFi deployment...'
                    deployToNifi()
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo 'üîç Verifying deployment...'
                    verifyDeployment()
                }
            }
        }
    }
    
    post {
        success {
            echo 'üéâ NiFi deployment completed successfully!'
        }
        failure {
            echo 'üí• NiFi deployment failed!'
        }
    }
}

def deployToNifi() {
    powershell '''
        Write-Host "Starting NiFi deployment..." -ForegroundColor Green
        
        # Bypass SSL for local development
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }
        
        # Check if NiFi is running
        try {
            $response = Invoke-WebRequest -Uri "https://localhost:8443/nifi-api/flow/process-groups/root" -UseBasicParsing
            Write-Host "‚úÖ NiFi is running and accessible" -ForegroundColor Green
        } catch {
            Write-Error "‚ùå NiFi is not running! Please start NiFi first."
            exit 1
        }
        
        # Upload template
        if (Test-Path "template.xml") {
            Write-Host "üì§ Uploading template to NiFi..." -ForegroundColor Cyan
            
            $form = @{
                template = Get-Item "template.xml"
            }
            
            try {
                $uploadResponse = Invoke-RestMethod -Uri "https://localhost:8443/nifi-api/process-groups/root/templates/upload" -Method Post -Form $form
                $templateId = $uploadResponse.template.id
                Write-Host "‚úÖ Template uploaded successfully. ID: $templateId" -ForegroundColor Green
                
                # Instantiate template
                $instantiateBody = @{
                    templateId = $templateId
                    originX = 100
                    originY = 100
                    disconnectedNodeAcknowledged = true
                } | ConvertTo-Json -Depth 5
                
                $instanceResponse = Invoke-RestMethod -Uri "https://localhost:8443/nifi-api/process-groups/root/template-instance" -Method Post -Body $instantiateBody -ContentType "application/json"
                Write-Host "‚úÖ Template instantiated successfully!" -ForegroundColor Green
                
            } catch {
                Write-Error "‚ùå Failed to deploy template: $($_.Exception.Message)"
                Write-Host "Response: $($_.Exception.Response)" -ForegroundColor Red
                exit 1
            }
        } else {
            Write-Error "‚ùå template.xml not found!"
            exit 1
        }
    '''
}

def verifyDeployment() {
    powershell '''
        Write-Host "Verifying deployment..." -ForegroundColor Yellow
        
        [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { $true }
        
        try {
            $response = Invoke-RestMethod -Uri "https://localhost:8443/nifi-api/flow/process-groups/root" -Method Get
            $processorCount = $response.processGroupFlow.flow.processors.Count
            $connectionCount = $response.processGroupFlow.flow.connections.Count
            
            Write-Host "‚úÖ Deployment verified successfully!" -ForegroundColor Green
            Write-Host "üìä Processors: $processorCount, Connections: $connectionCount" -ForegroundColor Cyan
            Write-Host "üåê Check NiFi UI: https://localhost:8443/nifi" -ForegroundColor Blue
            
        } catch {
            Write-Warning "‚ö†Ô∏è Could not verify automatically. Please check NiFi UI manually."
        }
    '''
}
