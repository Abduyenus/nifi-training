pipeline {
    agent any

    environment {
        NIFI_URL = 'https://localhost:8443/nifi-api'
        PROJECT_DIR = 'default/nifi-automation'
    }

    stages {
        stage('Checkout Code') {
            steps {
                checkout scm
                echo '‚úÖ Code checked out successfully from GitHub'
                
                // Debug: Show directory structure
                bat 'dir /s /b'
            }
        }
        
        stage('Validate Files') {
            steps {
                script {
                    echo "Validating files in ${env.PROJECT_DIR}..."
                    
                    // Change to project directory before checking files
                    dir(env.PROJECT_DIR) {
                        if (fileExists('template.xml')) {
                            echo '‚úÖ template.xml found'
                        } else {
                            // List files to debug
                            bat 'dir'
                            error '‚ùå template.xml not found in project directory!'
                        }
                        
                        if (fileExists('deploy-nifi.ps1')) {
                            echo '‚úÖ deploy-nifi.ps1 found'
                        } else {
                            echo '‚ö†Ô∏è deploy-nifi.ps1 not found'
                        }
                    }
                }
            }
        }
        
        stage('Deploy to NiFi') {
            steps {
                script {
                    echo 'üöÄ Starting NiFi deployment...'
                    
                    // Execute from project directory
                    dir(env.PROJECT_DIR) {
                        deployToNifi()
                    }
                }
            }
        }
        
        stage('Verify Deployment') {
            steps {
                script {
                    echo 'üîç Verifying deployment...'
                    verifyNifiDeployment()
                }
            }
        }
    }
    
    post {
        success {
            echo 'üéâ NiFi deployment completed successfully!'
        }
        failure {
            echo 'üí• NiFi deployment failed!'
        }
    }
}

def deployToNifi() {
    bat """
        @echo off
        echo Current directory: %CD%
        echo Starting NiFi deployment...
        
        powershell -Command "& {
            Write-Host 'Starting NiFi Deployment...' -ForegroundColor Green
            
            # Bypass SSL for local development
            [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { \\$true }
            
            # Check if template.xml exists in current directory
            if (Test-Path 'template.xml') {
                Write-Host '‚úÖ template.xml found in current directory' -ForegroundColor Green
                
                try {
                    # Check if NiFi is running
                    Write-Host 'Checking NiFi connectivity...' -ForegroundColor Yellow
                    \\$response = Invoke-WebRequest -Uri '${env.NIFI_URL}/flow/process-groups/root' -UseBasicParsing
                    Write-Host '‚úÖ NiFi is running and accessible' -ForegroundColor Green
                    
                    # Upload template
                    Write-Host 'Uploading template to NiFi...' -ForegroundColor Cyan
                    \\$form = @{
                        template = Get-Item 'template.xml'
                    }
                    
                    \\$uploadResponse = Invoke-RestMethod -Uri '${env.NIFI_URL}/process-groups/root/templates/upload' -Method Post -Form \\$form
                    \\$templateId = \\$uploadResponse.template.id
                    Write-Host \"‚úÖ Template uploaded successfully. ID: \\$templateId\" -ForegroundColor Green
                    
                    # Instantiate template
                    Write-Host 'Instantiating template...' -ForegroundColor Cyan
                    \\$instantiateBody = @{
                        templateId = \\$templateId
                        originX = 100
                        originY = 100
                        disconnectedNodeAcknowledged = \\$true
                    } | ConvertTo-Json -Depth 5
                    
                    \\$instanceResponse = Invoke-RestMethod -Uri '${env.NIFI_URL}/process-groups/root/template-instance' -Method Post -Body \\$instantiateBody -ContentType 'application/json'
                    Write-Host '‚úÖ Template instantiated successfully!' -ForegroundColor Green
                    
                } catch {
                    Write-Error \"‚ùå NiFi deployment failed: \\$_.Exception.Message\"
                    Write-Host \"Full error details:\" -ForegroundColor Red
                    Write-Host \\$_.Exception.StackTrace -ForegroundColor Red
                    exit 1
                }
            } else {
                Write-Error '‚ùå template.xml not found in current directory!'
                Write-Host 'Current directory files:' -ForegroundColor Yellow
                Get-ChildItem | Format-Table Name, Length -AutoSize
                exit 1
            }
        }"
    """
}

def verifyNifiDeployment() {
    bat """
        @echo off
        echo Verifying NiFi deployment...
        
        powershell -Command "& {
            [System.Net.ServicePointManager]::ServerCertificateValidationCallback = { \\$true }
            
            try {
                \\$response = Invoke-RestMethod -Uri '${env.NIFI_URL}/flow/process-groups/root' -Method Get
                \\$processorCount = \\$response.processGroupFlow.flow.processors.Count
                \\$connectionCount = \\$response.processGroupFlow.flow.connections.Count
                
                Write-Host '‚úÖ NiFi deployment verified successfully!' -ForegroundColor Green
                Write-Host \"üìä Current flow statistics:\" -ForegroundColor Cyan
                Write-Host \"   - Processors: \\$processorCount\" -ForegroundColor White
                Write-Host \"   - Connections: \\$connectionCount\" -ForegroundColor White
                Write-Host \"üåê NiFi UI: https://localhost:8443/nifi\" -ForegroundColor Blue
                
            } catch {
                Write-Warning \"‚ö†Ô∏è Could not automatically verify NiFi deployment: \\$_.Exception.Message\"
                Write-Host \"‚ÑπÔ∏è Please check NiFi UI manually at https://localhost:8443/nifi\" -ForegroundColor Yellow
            }
        }"
    """
}
